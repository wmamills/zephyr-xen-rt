diff --git a/xen/arch/arm/irq.c b/xen/arch/arm/irq.c
index ae69fb4aeb4a..cc0fd6c961ed 100644
--- a/xen/arch/arm/irq.c
+++ b/xen/arch/arm/irq.c
@@ -222,6 +222,7 @@ void do_IRQ(struct cpu_user_regs *regs, unsigned int irq, int is_fiq)
     struct irq_desc *desc = irq_to_desc(irq);
     struct irqaction *action;
     struct cpu_user_regs *old_regs = set_irq_regs(regs);
+    static bool once;
 
     perfc_incr(irqs);
 
@@ -237,6 +238,13 @@ void do_IRQ(struct cpu_user_regs *regs, unsigned int irq, int is_fiq)
     irq_enter();
 
     spin_lock(&desc->lock);
+
+    if ( (irq == GUEST_TIMER_PHYS_NS_PPI) && !once )
+    {
+        desc->handler = gic_hw_ops->gic_guest_irq_type;
+        set_bit(_IRQ_GUEST, &desc->status);
+    }
+
     desc->handler->ack(desc);
 
 #ifndef NDEBUG
@@ -257,11 +265,22 @@ void do_IRQ(struct cpu_user_regs *regs, unsigned int irq, int is_fiq)
 
         set_bit(_IRQ_INPROGRESS, &desc->status);
 
-        /*
-         * The irq cannot be a PPI, we only support delivery of SPIs to
-         * guests.
-         */
-        vgic_inject_irq(info->d, NULL, info->virq, true);
+        if ( irq != GUEST_TIMER_PHYS_NS_PPI )
+            vgic_inject_irq(info->d, NULL, info->virq, true);
+        else
+        {
+            struct domain *d = current->domain;
+
+            if ( !once )
+            {
+                struct pending_irq *p = irq_to_pending(d->vcpu[0],
+                                                       GUEST_TIMER_PHYS_NS_PPI);
+
+                p->desc = desc;
+                once = true;
+            }
+            vgic_inject_irq(d, d->vcpu[0], GUEST_TIMER_PHYS_NS_PPI, true);
+        }
         goto out_no_end;
     }
 
diff --git a/xen/arch/arm/time.c b/xen/arch/arm/time.c
index 09cae8138ef2..02c00e39ca3b 100644
--- a/xen/arch/arm/time.c
+++ b/xen/arch/arm/time.c
@@ -277,6 +277,8 @@ static void vtimer_interrupt(int irq, void *dev_id, struct cpu_user_regs *regs)
     vgic_inject_irq(current->domain, current, current->arch.virt_timer.irq, true);
 }
 
+static void ptimer_irq(int irq, void *dev_id, struct cpu_user_regs *regs) {}
+
 /*
  * Arch timer interrupt really ought to be level triggered, since the
  * design of the timer/comparator mechanism is based around that
@@ -308,8 +310,7 @@ void init_timer_interrupt(void)
 {
     /* Sensible defaults */
     WRITE_SYSREG64(0, CNTVOFF_EL2);     /* No VM-specific offset */
-    /* Do not let the VMs program the physical timer, only read the physical counter */
-    WRITE_SYSREG(CNTHCTL_EL2_EL1PCTEN, CNTHCTL_EL2);
+    WRITE_SYSREG(CNTHCTL_EL2_EL1PCTEN | CNTHCTL_EL2_EL1PCEN, CNTHCTL_EL2);
     WRITE_SYSREG(0, CNTP_CTL_EL0);    /* Physical timer disabled */
     WRITE_SYSREG(0, CNTHP_CTL_EL2);   /* Hypervisor's timer disabled */
     isb();
@@ -318,6 +319,8 @@ void init_timer_interrupt(void)
                 "hyptimer", NULL);
     request_irq(timer_irq[TIMER_VIRT_PPI], 0, vtimer_interrupt,
                    "virtimer", NULL);
+    request_irq(timer_irq[TIMER_PHYS_NONSECURE_PPI], 0, ptimer_irq,
+                "ptimer", NULL);
 
     check_timer_irq_cfg(timer_irq[TIMER_HYP_PPI], "hypervisor");
     check_timer_irq_cfg(timer_irq[TIMER_VIRT_PPI], "virtual");
